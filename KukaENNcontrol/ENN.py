# -*- coding: utf-8 -*-
from __future__ import print_function

import numpy as np
import matplotlib.pyplot as plt
import csv
import os
import random


class ELMAN_RNN(object):
    def __init__(self, input_num, hidden_num, output_num, learning_rate):
        self.input_num = input_num
        self.hidden_num = hidden_num
        self.output_num = output_num
        self.learning_rate = learning_rate
        self.hidden_weights = np.random.random((self.input_num, self.hidden_num))
        self.output_weights = np.random.random((self.hidden_num, self.output_num))
        self.rnn_weights = np.random.random((self.hidden_num, self.hidden_num))
        '''
        self.hidden_weights = np.array([[
            20.505208110351923, 17.664828859131802, 7.9547577966009735, -4.229342976517377, 9.428241807587444,
            -23.253135742263442, -2.5636110581050136, 8.39090032727429, 16.941104303560905, -32.17841242920784,
            16.383801021476533, 46.693758851700224, -10.612409872127662, 30.649120503248504, -4.657922397369919,
            18.303660783393134, 23.482374697272697, -21.78032541479234, 3.768537919979336, 12.654037482479715],

            [
                21.516477587705825, -4.486078123284852, 1.1796622852216245, 40.46880473690831, -12.45010663055886,
                15.928902972124614, -39.854019696024416, 15.11617886571252, 15.705764649605637, 1.8785190914347338,
                16.971296567232372, -7.071118156291649, -20.511268993493886, -17.09190442117222, -49.726810244042795,
                3.964800312430435, -9.717589073509252, 13.526237450302585, 20.343108952219897, 27.1045744609278],

            [
                17.175626768647984, 21.357365569850913, 37.13894839288824, 11.626670835758967, 38.78129949071607,
                -22.41851992545202, -6.737871137536477, 4.2007121032321795, 20.710983335780835, -33.86155233301879,
                39.16435140098082, 34.16258139201215, -14.88299282820631, 63.012915672640915, -12.598905049494027,
                33.33730896879141, 46.56176273868225, -13.304525235086665, 21.26477638315123, -5.414135070446252],

            [
                -9.705875302236487, -1.7983887675539745, 17.713119516260118, 18.206966129024227, 24.498669506101624,
                12.377181006392952, 12.184072515517368, -36.95413865037661, 18.07520320612811, 49.83592209121331,
                10.307230808602853, -40.61773905352465, 47.1961169266833, 72.86974292749761, -4.2717310287380466,
                4.0726853529835125, 43.047955752570196, -6.142824534074402, 32.22858272955441, -55.79197577236363]])
        self.output_weights = np.array([[6.74841036e-02, -8.42093762e-02, 1.45101478e+00, -1.15643639e-02,
                                         -9.06708320e-02, 1.76686239e+00, -4.07071119e-02, -1.52034316e-01,
                                         1.76377638e+00, -2.57535709e-01, 3.49206269e-01, 9.70069449e-01],
                                        [-3.06744455e-02, -2.38608088e-01, 4.07436042e-01, -5.85140550e-01,
                                         6.42791618e-01, -6.36007412e+00, -1.29656540e-01, -4.66527090e-01,
                                         -1.74958448e+00, -4.51256144e-01, 6.16356210e-01, 3.70893628e+00],
                                        [1.47787730e-02, 1.15806239e-01, 5.80836441e-01, -1.27517717e-03,
                                         -1.22795736e-01, 6.57942853e-01, 9.35264444e-02, -1.65248402e-01,
                                         2.18110157e+00, -1.05940322e-01, 1.98072772e-01, -5.52443079e-01],
                                        [2.02035287e-01, -1.46103489e+00, 1.47627501e+00, 1.46765675e-01,
                                         1.53186582e-01, -3.20658974e+00, -2.25340331e-01, -1.66932171e-02,
                                         -2.21961270e-01, -3.74599229e-01, 4.25358386e-01, 3.20638062e-01],
                                        [-5.96068329e-02, 6.55257478e-02, -4.08918341e-01, -6.70143203e-01,
                                         4.89541161e-01, -6.34566456e+00, 2.44020440e-02, -5.14922745e-01,
                                         1.41672763e+00, -1.54680822e-01, 1.33466643e-01, 4.27550558e+00],
                                        [1.34496307e-01, -7.94907935e-01, 2.18923884e+00, -2.35741501e-01,
                                         3.03088769e-01, -2.64090883e+00, -1.30183251e-02, -6.81245916e-01,
                                         -6.21241281e-02, -3.03920990e-01, 3.17308500e-01, 5.38811904e+00],
                                        [-1.96043371e-01, 4.38954597e-01, -2.53523910e+00, -1.57637536e-01,
                                         2.96621396e-02, -1.14016780e+00, 7.04077009e-02, -3.31982004e-01,
                                         -3.01683354e-01, -2.37130224e-02, 7.23533757e-02, 2.18969451e+00],
                                        [-2.11358518e-01, 1.66267289e-01, -1.53679810e+00, -1.10760659e+00,
                                         9.98581434e-01, -1.45019173e+01, -2.51046413e-01, -4.51100077e-01,
                                         -1.16395475e+00, -6.30911427e-01, 7.89426432e-01, 3.94063666e+00],
                                        [-2.36009204e-02, 1.90848298e-01, -1.03994701e-01, -3.00230759e-01,
                                         2.64713626e-01, -3.72886615e+00, -6.92173234e-03, 4.09393769e-02,
                                         -2.70556554e-01, 6.32227716e-02, -3.17059216e-02, 7.46537877e-01],
                                        [-1.25017226e-01, -3.19888187e-01, -9.71596059e-01, -4.42423224e-01,
                                         4.32448905e-01, -4.26942418e+00, -1.08334738e-01, -5.81245854e-01,
                                         6.24663527e-01, -3.48375662e-01, 3.16997066e-01, 6.09331780e+00],
                                        [-1.69983307e-01, 5.25784735e-01, -3.15142447e+00, -2.38853454e-01,
                                         1.51698565e-01, -1.15052893e+00, 7.34231049e-02, -1.66755825e-01,
                                         5.35588765e-01, -4.19401493e-02, -3.64446601e-03, -4.48376827e-01],
                                        [-2.53839215e-01, 2.96204947e-01, -2.89337797e+00, -8.73036397e-01,
                                         5.99095482e-01, -9.44226252e+00, 3.44156298e-02, -8.81930853e-01,
                                         1.37739121e+00, -4.08496688e-01, 4.54833501e-01, 6.23050983e+00],
                                        [-2.01585669e-01, 6.33439366e-02, -1.31319491e+00, -5.20154331e-01,
                                         4.29479880e-01, -3.64866350e+00, -8.35370600e-02, -8.00633321e-01,
                                         3.94499629e-01, -5.96185234e-01, 7.25729231e-01, 4.85576593e+00],
                                        [4.79707828e-02, -6.37044237e-02, 5.97804438e-01, -7.53619574e-02,
                                         5.78012909e-02, -2.10843448e+00, 2.03816897e-01, -1.81060368e-01,
                                         2.34577128e+00, 2.20999190e-01, -4.48247160e-01, 6.40937678e-01],
                                        [-2.33681694e-01, 5.25323847e-01, -2.87203628e+00, -4.90212835e-01,
                                         2.78472609e-01, -2.48916537e+00, -4.90032139e-02, -4.38652450e-01,
                                         -3.82603626e-02, -2.57125970e-01, 4.01796839e-01, 5.67759693e+00],
                                        [-5.68552423e-02, 1.57369451e-01, -8.84642648e-01, -1.23988576e-01,
                                         6.94048988e-02, -1.17079571e+00, -1.06307847e-01, 7.06650088e-02,
                                         -1.21078288e+00, -2.53843030e-02, 8.36761643e-02, -3.94499656e-01],
                                        [-1.69911030e-01, 4.40224738e-01, -2.21867524e+00, 3.03189822e-01,
                                         -2.80977444e-01, 7.68481949e+00, -1.62242727e-01, 2.48712441e-01,
                                         -2.56368199e+00, -1.45689428e-02, 1.30517843e-01, -7.34922782e-01],
                                        [4.24906411e-02, -4.38970017e-01, 1.07934260e+00, -4.78672224e-01,
                                         3.48692460e-01, -5.57625560e+00, -1.16539179e-03, -6.29756939e-01,
                                         1.32924862e+00, -4.11371586e-01, 4.62775301e-01, 4.10279517e+00],
                                        [-1.54604398e-02, -2.26315883e-01, -3.66399807e-01, -8.55424769e-02,
                                         2.58373844e-01, -1.33852736e+00, 9.64013013e-02, -2.77214341e-01,
                                         -1.10057584e-01, -3.16433926e-02, 1.27298280e-01, 1.39801794e+00],
                                        [-1.04509161e-01, 2.21521666e-01, -1.82289439e+00, -2.74860933e-01,
                                         2.08593284e-01, -2.23901116e+00, -4.54583105e-02, -2.77070872e-01,
                                         -2.52387494e+00, -1.69398147e-01, 2.39815417e-01, 1.14601422e+00]])
        self.rnn_weights = np.array([[0.84460144, 0.68528444, 0.00753676, 1.60991974, 0.883798, -0.43146415,
                                      0.14640028, 0.44045987, 0.9801453, -0.57827429, 0.28581751, 0.69615159,
                                      -0.02877944, 3.08383947, -0.39148948, 1.41298872, 1.55512958, 1.12677619,
                                      1.49532299, -1.03786563],
                                     [1.53345497, 0.69790491, 0.5671713, 0.83264971, 0.30780243, -0.63655938,
                                      0.58978357, -0.50312907, 1.18940298, -0.82380793, 0.73988415, 1.17083734,
                                      0.30693798, 2.7849411, -0.37826169, 0.53586634, 1.54906978, 0.67469277,
                                      0.96118619, -0.37315431],
                                     [0.29343899, 0.45582373, 0.8880711, 1.78586775, -0.04338964, 0.30490338,
                                      -0.33982323, -0.20755945, 0.12602057, -1.83926897, 0.53041978, -0.07211422,
                                      0.2210331, 2.15988953, -0.75332999, 0.8054457, 0.80854948, 0.96765837,
                                      1.04965063, -0.72388322],
                                     [0.04986183, 0.85704757, 0.3292899, 2.17719374, 0.98075641, 0.51513617,
                                      0.59026272, 0.81552773, 0.05909793, 0.63165417, 0.6879371, 1.24335766,
                                      0.5284665, 1.20904292, -0.66288589, 1.28574866, 0.85700127, 1.80748978,
                                      1.13705414, -0.22756178],
                                     [0.61681105, 0.26605535, 0.02513162, 1.55868991, 0.8064508, 0.02076555,
                                      0.3692823, 1.02805881, -0.06671271, -1.98215492, 0.84966864, 0.91531758,
                                      -0.01129661, 1.8254539, -1.1551647, -0.26029985, 0.8074301, 1.23327128,
                                      0.52877665, -0.67083655],
                                     [1.36141727, 1.01760617, 1.00416297, 1.5753163, 0.15154161, 0.07690239,
                                      -0.18414057, 0.16107079, 1.04204334, -0.44677567, 0.25637469, -0.72369137,
                                      -0.25286132, 1.37815374, -0.61734025, 1.41747656, 0.65957648, 1.33413359,
                                      2.05840505, -0.9038291],
                                     [0.05739349, 0.94229273, 1.26718688, 1.66423519, 1.81162967, 0.19349748,
                                      0.9118428, 0.68516243, 0.97541988, -1.98716298, 0.646944, 1.74646068,
                                      0.70673682, 1.45688393, -0.68800594, 0.11476796, 1.05822231, 1.96875484,
                                      0.32280825, 0.90974216],
                                     [0.22382048, 0.65495124, 0.44999815, 1.20354703, 1.04925429, -0.36135043,
                                      0.80629787, -0.523199, -0.08296153, 1.75087041, -0.03441626, -0.38333728,
                                      0.42391553, 2.57921889, 0.81306008, 1.27418094, 2.18132023, 0.89767377,
                                      0.86807445, -1.90405659],
                                     [1.2899298, 0.95289983, -0.29729389, 1.16939494, 1.01561381, -0.49314799,
                                      0.10175566, 0.16623671, 0.43766402, -1.82783376, -0.59461854, -0.1662387,
                                      0.38020554, 2.49698907, -0.78975777, 0.21999555, 1.35345247, 1.17452703,
                                      0.28264633, -1.51324182],
                                     [-0.32363752, 0.8156212, 0.11397596, 1.48917276, 0.734741, 0.59242344,
                                      0.36156675, 0.54553333, 0.24205352, -2.09064657, 0.13806065, -1.5443712,
                                      0.52770786, 1.3399054, 0.11391185, 0.51436865, 0.68401086, 1.62534062,
                                      0.6339489, -0.59636401],
                                     [0.73173326, 0.78756838, 0.16076616, 2.2959071, 0.11050138, -0.05892925,
                                      0.07387713, 0.40142783, 0.71160736, -0.90392913, 0.130597, 0.66687817,
                                      0.59228154, 2.72687436, -0.20334935, 0.19135475, 0.88789063, 1.32393877,
                                      0.88610652, -0.05847569],
                                     [-0.17700029, 0.95635941, 0.9222357, 0.69088762, 0.11532361, 0.23070529,
                                      0.9970137, 0.29186519, -0.31037522, 1.57015893, -0.74023041, -0.89173993,
                                      0.66484395, 2.51925496, 0.31383309, 1.69091579, 2.09091899, 0.95228432,
                                      0.22018754, -1.37829486],
                                     [0.58253206, 1.10112463, 0.76557496, 1.56599827, 1.41312264, 0.35474668,
                                      0.28786035, 0.019578, 0.08183901, -1.98472222, 0.83601151, 0.18431552,
                                      -0.18492367, 1.09029337, -0.05911307, -0.22156396, 0.56501799, 1.91063385,
                                      0.97559518, 0.48611819],
                                     [-0.51555344, 0.68354418, 0.65160279, 1.61074045, 1.43635873, 0.28284542,
                                      0.46030058, 0.09231203, 0.36492704, 0.34593163, 0.79784725, -0.0399804,
                                      -0.12250338, 1.90889176, -0.98952687, 0.81065808, 1.38787568, 1.24172014,
                                      0.68183094, -1.22635439],
                                     [1.00123058, 0.60833286, 0.48845188, 0.97805089, 1.44849033, -0.03104575,
                                      0.63928292, 0.67588179, 0.43798157, -2.3791208, 0.17248266, 0.21515705,
                                      0.03146034, 2.53039981, -1.64223901, 0.11995193, 0.63414378, 1.28836542,
                                      0.93980458, -1.25220524],
                                     [0.33542714, 1.0795326, 0.19942476, 1.27488467, 0.81330077, -0.97589383,
                                      -0.05638049, -0.16455279, 1.28482953, -1.22139564, 0.25949499, 0.01260184,
                                      -0.28113774, 2.9451251, -0.07001301, 1.17487046, 2.05846479, 1.29310277,
                                      1.43760199, -0.44020366],
                                     [0.54706007, 0.58649711, 0.17141441, 1.10379572, 0.85260859, 1.00945356,
                                      0.02029528, -0.0487215, 0.15981864, -2.14005966, 0.14998882, 0.19207854,
                                      0.72451752, 2.76808359, -0.79062762, 0.12010945, 0.99634703, 1.72041194,
                                      1.077072, -0.92973332],
                                     [-0.87654353, 0.84139489, 1.01860963, 2.13349505, 1.42370689, 0.89315402,
                                      0.1133739, -0.3500359, 0.26619309, 1.14859671, 0.13662499, -1.20494677,
                                      0.34871083, 1.68177178, 0.70755801, 1.07894255, 1.25343176, 0.57873035,
                                      1.07065359, -1.98041215],
                                     [0.59674171, 0.61240137, 0.92463272, 1.58700281, 0.86339543, 0.54288572,
                                      -0.29167482, 0.73004643, 0.08130043, -0.55549219, 0.34922872, 0.32394917,
                                      -0.09980265, 1.4613474, -0.82023108, 0.95059075, 1.60304477, 1.62145159,
                                      0.45618984, -0.54304962],
                                     [0.21333534, 0.07156767, 1.26400526, 0.91918666, 1.49483805, 0.25601028,
                                      -0.21077672, 0.25121159, 0.10343282, 0.29524572, -0.13648284, -0.37363309,
                                      -0.01361521, 1.8584446, 0.98406826, 0.29560896, 1.16242372, 1.3993603,
                                      1.24108172, -1.05305317]])
        '''
        self.hidden_weights = np.array([[
            38.57125642928533, -70.25914984225443, 44.900645359616206, 4.6962304637553265, -6.853724145862163,
            -11.353672960595162, -4.283840666168023, 736.516375545221, -11.612505883925166, -11.068457056828269,
            -4.899633588105505, -7.201534246612567, 15.907888790644371, -19.800320647139426, -4.505561423427663,
            12.38536858297284, -3.1461727204669216, -22.067733388489643, -15.995168367512305, 18.299820963060302],

            [
                27.923304849403877, 47.24028221968663, -36.41023585806126, -20.76012125676415, 5.567090973360401,
                56.29179911871178, -34.03553527987133, -626.7735265423103, 7.87315104133077, 10.426745495425376,
                -22.229445796680782, 129.798126575556, 46.36606656129298, 2.787798047637113, 33.732474375345795,
                4.518244213377907, 39.52234638583705, 15.13946304779093, -21.213539706328504, 11.914256317231947],

            [
                131.4306828951896, -9.607582067863769, 7.478679960189332, -5.372966463803477, 19.466254954000387,
                17.344761723334628, 12.563864936223421, -60.94047180709758, -30.99099233984443, -19.413381912925374,
                -2.2442633218535386, 91.201436767193, 27.069634740295147, -19.388566639845163, -4.603656638045521,
                17.540720770921446, 6.547816906868803, 14.693219514526, -55.149203538361476, 18.046228500966038],

            [
                -56.469786143842555, 92.377250004931, -73.62511674297608, -25.6481636277717, 30.829570444472996,
                274.72074139561005, 23.653034920981153, -1387.0749083876358, -28.777424347328985, -12.937609975624959,
                19.47811198784123, 11.898022609888892, 38.069762796798834, 2.3751862113083697, -12.700877222064605,
                5.999546713223229, 28.843886516956953, 23.4757564639477, -371.89587831203, 7.008351051874752]

        ])
        self.rnn_weights = np.array([[
            -3.0056055950498672, -16.106046426038045, 13.686582615005383, -0.2735812011266164, -2.431380994778144,
            0.8900044951155404, 0.44881822689056455, 188.3650197102589, 0.5185874643157887, 0.3854459768928434,
            -0.2926260008845578, 0.33413706962630785, -0.23623059577407823, 1.231250362474421, -0.9741998131054778,
            -0.20774213246046166, -0.26161484123804457, -5.050409183360301, 1.0085108025875023, -0.6751565510590443],

            [
                0.17542810314406343, 0.602325876905156, 1.2187632273394935, 0.2611932448444462, 0.7430908258309936,
                20.17907544323133, 1.2396568082472834, -0.13660608959126694, 0.3502795131761198, 0.5815931455290032,
                0.46394881923974657, -1.3170329694614753, -0.39404929846899966, 0.9489924062711796, -0.6482004115907732,
                0.6679325784377301, 0.598729540071478, 1.0821493093232093, -25.870788647981886, -0.5662729284954359],

            [
                -0.23935275841525247, -16.40709094727678, 9.389066619344542, 0.9550321878134843, -2.614256087375633,
                -0.3327877801483258, 0.7937130415540037, 187.56135082911817, 0.2263439774192582, 0.6117447383929175,
                0.830649852184402, -45.0996562297444, -1.3187505377802662, 0.5617794010792685, -1.0998932316754673,
                0.15986945930412677, 0.25147915176534263, -5.463558058139776, 0.4731205865557174, -0.17794093016650966],

            [
                1.1125129200046489, -16.7744320161483, 13.946441759343, -0.214395451631032, -3.0171510392872793,
                -0.2640224397542356, 0.3856581709701196, 188.71313203480383, -0.3766513226911883, 0.8357390419706131,
                0.3714990977881092, -46.28198157669873, -1.678835370152873, 0.5301128089229092, -1.168280810702453,
                -0.5879568467078709, 0.557010980219319, -4.94833719082996, 0.5962683259671344, -0.5951057691519238],

            [
                -0.2781324906264413, 0.12987250108358372, 1.2686173252170638, -0.16707745120077722, -1.664310244653513,
                21.025080086861056, 0.6784074014496912, 0.44417771179312276, -0.4216039018466787, 0.7440741663964253,
                0.6036281688420365, -1.7828926701486763, 0.3793669331822548, 1.0896839950341286, -0.8991044377456026,
                0.4383012291118225, -0.3142534975469722, 0.9478724317115602, -25.543131504317905, -0.3714076647958128],

            [
                0.14476125262390016, 0.645491340343331, 1.802958481090976, 0.43459762709655025, 1.9278578751215751,
                13.16517806368819, 0.9506138562525595, 0.5766379629034502, -0.08842535665530792, 0.20617671812012772,
                0.43148170352863385, -0.1289400095447077, 0.4854562149369739, 1.0645986653927493, -0.09408965197156877,
                -0.11418344257419995, 1.1629845488337769, -4.41706883761004, -15.878688162670974, -0.3849833925601062],

            [
                0.2508168115485468, 0.1627606341490226, 0.5996551203706039, -0.1932294491242459, 0.24038143847986168,
                20.38520381507953, 1.0249078535592988, 0.14142443565221616, -0.8332240227003832, 0.1876549205347924,
                0.21359894739648505, -45.98190860185358, -0.8281917228265593, 0.1838789337544189, -0.9443142401751383,
                0.46011129288524827, 0.6101195579717339, 1.151914930702682, -26.378079763154837, -0.3878925248027272],

            [
                0.42768995768925144, -15.739616168655134, 1.6432464882272735, 0.27746240195760735, -2.771950616199782,
                0.41463624036817437, 0.8323203103238017, 134.69084415459727, 0.49426160133886904, 0.4180358205767454,
                1.176171391997651, -44.785951686009064, -1.1871709317816548, 0.8702601145400198, -0.7474554152417748,
                -0.1382376721772285, 1.5218025197547371, -4.6738185830863515, 1.0167883192831098, 0.08451220044343553],

            [
                0.8586470636918129, -15.566464469527872, 1.4521370121283128, 0.8604514876202916, 0.8730612393750173,
                0.40058776557206793, 1.342752984651108, 189.03065327256454, -0.3482099986875634, 0.35861373254008994,
                0.22727188091417935, -45.366695043813685, -0.7151370736543414, 0.5718574496670197, -0.5249027302843354,
                0.028070675009420277, 0.44944785864394005, -4.968991844699508, 0.7040734386840339, -0.5573907221294269],

            [
                -0.42579715829964193, -15.78179343607346, 1.333116684439565, 0.36718705395128765, 0.5683512119802133,
                -0.16449793448152406, 0.6639887963401037, 188.5969055522241, -0.11250539862561613, 0.4501390561762858,
                0.7541886719249726, -44.27314208666589, -0.08074451538287979, 0.8602548249060166, -0.9826318050882639,
                -0.30599327753081995, 1.2619768593601224, -4.446485920258588, 0.9065140456700764, -0.4313634307585763],

            [
                0.5225750940399259, 0.17930947724467855, 0.0858509468619294, -0.17167294630892574, 1.2913497088486245,
                20.183094969532487, 0.6979572754474889, 0.1728396402567802, -0.18541369740855138, 0.44503006609283635,
                0.3080535159786178, -46.175498607829454, 0.3544452756883852, 0.24464171151233505, 0.5297073875309916,
                0.10906815257634642, -0.021354141921229502, 0.8422572568157014, -27.033615875656817,
                -0.1512105118404473],

            [
                -2.18473232356227, -16.140585313126614, 1.3468354291550808, 0.1092542591874787, 1.810265312204899,
                19.79195045549817, 0.5040666482489442, 187.66174225426332, -0.04141366580961486, 0.4647041411747302,
                0.3851439248966149, -17.301838503775162, -1.1824129189118935, 0.7041547381362945, -0.045559318042998315,
                -0.8703767664974199, 0.10912062035078478, -5.003710261241275, -25.822427736390317, -0.7463579890562864],

            [
                -2.3306920085923757, 0.5235016625813755, 12.718445596441388, -0.5582351689847576, -2.1194918459750247,
                20.543415631671166, -0.3400326371896477, 0.8021801165819042, -0.06534614126292847, 0.5921597729629329,
                0.7273776549054584, -1.333309377247486, -0.8502884516870262, 0.9571664183702059, -1.3940147292717024,
                0.059575202538406744, 0.9491763661482981, -4.534973679045148, -26.26271590677043, -0.08348013143365104],

            [
                0.27389261817961236, 0.45437397574038074, 0.9755675959168103, 0.1816956756477457, 1.0705994036174706,
                20.4623265051219, 0.6284719055925216, 0.707968742344119, 0.08559887006583107, 0.9595813212088705,
                0.7705668318094336, -46.2252813232139, -0.03893293966205791, 0.8895702676341408, -0.07238594515365848,
                0.5768685878056666, 0.6588213821898083, 1.819923198001913, -25.796037027188884, -0.45298478568309725],

            [
                -1.9653994458118456, 0.09301791270502886, 0.08166197458672857, 0.5983920732759622, 2.040674573524222,
                -0.42739214364749006, 0.7392426700249456, -0.16702707373298312, -0.20697204284668283,
                0.05174961944705662, 0.4302437892200973, -0.8438464922019095, 0.14607905252740871, 0.5646364361323399,
                0.06124631364852179, 1.1169474507485084, 1.0264407780604976, -3.992395561291131, 0.3365039101440938,
                -0.11590309203655891],

            [
                -2.1721047732934475, -15.801160474544076, 13.312202938877475, 0.12000482953195113, -1.8325173876575394,
                20.916839613682242, 0.84624854433151, 187.89761506190433, -0.5502232684868495, 0.2556988276700543,
                0.44859301639019794, -2.085332336179228, -0.637874717555404, -0.03890303335842496, -1.7830416389119743,
                0.4327994022208982, 0.11511135003071307, -5.086652898964111, -26.158570236816278, -0.399109955554951],

            [
                0.22591324462031498, 0.5866195330468149, 1.342313705493402, -1.2728353365034863, 1.164201744763205,
                20.49890057770988, 0.3694835912569417, 0.05809931196147594, -0.613512473257393, 0.033264025985504285,
                0.14054806300577305, -1.5375929217805213, 0.5454108332597651, 0.8263368820660392, 0.22189263106700963,
                0.25927041446827087, -0.5980995622216696, -4.435270597377853, -26.412868191132905, -0.5140529080629928],

            [
                -0.13155097564581847, 0.45470603022581174, -0.10233145035225069, -1.2728275908586757,
                1.2542580292833245, 20.828069405416905, 0.9984282994390632, 0.18752111205967967, -0.9348484939744532,
                0.25687296314034863, 0.0017184594872804578, -0.6961492590649759, 0.5293887555206405, 1.1551049827063125,
                0.19838854451795673, 0.6626689247682109, 0.8439500465711703, 0.2893829028054564, -26.177924978199783,
                0.31817147468845586],

            [
                -0.14788782495041908, 0.6450605895722377, 1.2476142496384839, 0.4723567712481284, 1.116765857661648,
                19.680910350834054, 0.7074047709132237, 0.4734018939829891, -1.1460762399188067, 0.41815105081807274,
                0.38651425446006443, -46.29645179894156, -0.31586627343481705, 0.5045249118801162,
                -0.010176486104724769, 1.0144742117982142, 1.5392985290920214, 1.5510081916376235, -25.04512560916164,
                -0.8403625185397989],

            [
                -1.9132660700965378, -0.09894711793343054, 14.322698004945824, 0.028179481165881988,
                -1.6244215484697542, 20.849543561511208, 0.6384774589485297, 0.3130398911513438, -0.9965568249949753,
                0.30689297578407293, 0.5193532150768095, -1.338180900174417, -0.30822520274415516, 1.0778905854522578,
                -1.4415980963923072, 0.7665902261142057, 0.8586551006716557, -5.020438196665168, -26.811007372786047,
                -0.25815171180339064]

        ])
        self.output_weights = np.array([[
            -0.2597743177730992, 0.0455192814813276, -6.902735158968504, 0.522283347767269, -0.561000781853634,
            11.70204869671539, -0.17712670916823367, 0.3591538850711693, 3.086600205600079, 0.1345352266929163,
            0.01845017926551994, -2.9870111557111607],

            [
                -0.7820615352336673, -1.4588894339766172, 12.61096785671424, -2.7453454391479393, 3.2517718371801045,
                -52.2599906419167, -0.8089137402388131, -2.85150637043545, 12.328629031395, -1.8753159403812967,
                1.5131256870819367, 29.150453586497896],

            [
                -0.4170650228205368, -0.3280923132840986, 11.216535058569743, 0.5643464354143253, -0.1697757210170753,
                -4.865609395523859, -0.43994284440821746, 0.3454192948456698, 5.935100537630912, 0.08131765756881312,
                -0.19522583141556038, 0.7116053441780567],

            [
                -0.5718972775553122, 0.9820096013351032, 2.948487172484158, -0.5063210006030813, 0.5096745795097962,
                -7.177222836356213, -0.3345259368984762, -0.3447743417390336, 3.6768115621701822, -0.3061413447347948,
                0.7799991801209638, 0.5132990359005036],

            [
                -0.403686910370785, 0.5305032449274434, -8.218876189395399, 0.46495301784327026, -0.7224950101187722,
                17.311656282796374, -0.25293036104982775, -0.1168332956583058, 9.144413002089198, 0.016690968644791138,
                -0.3465830108176786, -3.2316879741701854],

            [
                -0.17499121745250049, -0.2521368163885899, 3.5063604457044018, 0.1813327360880358, 0.5410845737065267,
                -26.067083549066595, -0.41179228239174087, 0.052275467654142066, 3.559698082517262, -0.4456951061167166,
                -0.32778278744439493, 38.39634764879542],

            [
                -0.23151938503178415, -0.5082790678352358, 16.252961394849695, 0.1230011836679789, 0.21520704101650973,
                -3.6867580163945606, -0.42142747053926743, -0.13817672656873808, 21.53763360585102, -0.2289117674175074,
                0.12282096042043655, -11.027879827189906],

            [
                -0.3078972196046374, -0.46581080585129175, 12.135073142666554, -0.09336822325766705, 0.5229372424195304,
                2.767231124633564, -0.42497713979944746, 0.12172728089353248, 4.055473685629385, 0.11214857837324232,
                -0.15512874680861966, -2.0349831432150194],

            [
                -0.33103005746474795, -0.31244228213931813, 3.165056024350878, 0.05545871561772154, 0.22945350637427012,
                -10.76113946155532, -0.5203636506667767, 0.4266050951172514, -4.1145290491135285, -0.19412529370586842,
                -0.02506917162022513, 8.734358710315405],

            [
                -0.09531788216531761, -0.3509637123355713, -5.1620948128108495, 0.4215237943706336, 0.43346495223355425,
                -22.81230953786041, -0.17315839645212863, 0.06997912242417054, -2.594164207658779, -0.07692856968932646,
                -0.21111040151087143, 12.444656256320625],

            [
                -0.3861534182531475, 0.39891628630800563, 8.831284210072905, -0.15999487277032945, 0.23099494605662324,
                -6.3202926719570955, -0.2580185704411878, -0.3201994869668522, 13.874144715831779, -0.17935816680414685,
                0.008594024676301992, -2.5024207551179174],

            [
                -0.23222663180994824, -0.12700568022174388, 4.9176775316203045, 0.11630481964428967, 0.2585126795911442,
                -10.14654122106582, -0.44982343307799627, 0.15774641855418894, -0.7253231662792974,
                -0.39402022761071265, -0.477432011239163, 14.573922737460453],

            [
                -0.32776614665948384, 0.39120600041059567, -6.513559796970367, 0.19365735025425568, -0.351801278583128,
                10.43442576316525, -0.41830981932282707, 0.09268695091644333, 7.570992185394637, -0.3471369838802383,
                0.24368475593309225, -8.22827295747765],

            [
                -0.629641830050277, 0.6297707101364318, 4.88937344789106, -0.6956848397997563, 1.5282011799482742,
                -18.006466811139497, -0.2394937592513296, -0.9190729196770644, 7.666970289208983, 0.19749354284127807,
                -1.1192490613628587, 9.945336182101833],

            [
                -0.11803024760937103, 0.4533712607935472, -16.875978190936074, 0.21440566737276573, 0.24184659149844095,
                -5.014458478837214, -0.23900498134027143, 0.45745238613969025, -8.719506585865194, -0.1504711794879413,
                -0.32203889093368576, 10.163280597902542],

            [
                -0.5679292337186651, -2.0911151801679133, -7.927494553208214, -2.183961887902869, 2.1178635098971768,
                -7.3873173977176, -0.5856037628156103, -2.8981023378562227, 3.13122210791943, -1.7001569332252278,
                1.6235680508369508, 21.880602822270752],

            [
                0.3103596439956425, -1.2487049504782888, 1.3270345621971238, 0.29705277342957104, -0.0738582214502285,
                -6.498995925733486, -0.5130128730750653, 0.6980445090702216, 7.7572964649976885, -0.13568785924545917,
                -0.32787370034231467, -1.713971706358997],

            [
                -0.3907744359052641, 1.0806389310976832, -5.268292979947163, 0.8993945038506892, -1.004043325238294,
                19.731383452800387, -0.34631622319018895, -0.08185461313737612, 7.114670717067547, -0.1489795046386267,
                -0.015676536079113457, 1.7938530655182774],

            [
                0.1517069697181427, -0.5262307546090773, 11.777045171531075, 0.6556298364668215, -0.8934271304955727,
                -3.865259661371592, -0.6068781027608634, 0.33267376559211703, 12.538115751482042, -0.772300270368381,
                0.5872491743532013, 1.0914290637406694],

            [
                -0.34900275720423996, -0.003002110112144886, 5.768820908441255, 0.2687359601854641, -0.6762545009268879,
                21.68487776536736, -0.1211235933018871, -0.03836462512255154, 16.391799555294234, 0.0369242054779213,
                -0.46776519994457877, -8.099237693652057]

        ])

        self.hidden_bias = 0.97748551
        self.output_bias = 0.61456895
        self.hidden_output = np.zeros((1, self.hidden_num))
        self.hidden_output0 = np.zeros((1, self.hidden_num))

    def training(self, train_input, train_output):
        """training one time"""

        output = self.feed_forward(train_input)
        self.bptt(train_input, output, train_output)

    def calculate_the_cross_entropy(self, a, b):
        loss = 0
        for i in range(a.shape[0]):
            x = a[i]
            y = b[i]
            y = np.array(y).reshape(1, 12)
            result = self.feed_forward(x)
            loss += self.get_the_total_error(y, result)
        loss = loss / float(a.shape[0])
        return loss

    def get_the_total_error(self, y, result):
        loss = np.linalg.norm(y - result)
        return loss

    def feed_forward(self, input):
        self.hidden_output0 = self.hidden_output
        self.hidden_output = self.sigmoid(
            np.dot(np.array(input).reshape(1, 4), self.hidden_weights) + np.dot(self.hidden_output,
                                                                                self.rnn_weights) + self.hidden_bias)
        return np.dot(self.hidden_output, self.output_weights) + self.output_bias

    def bptt(self, input, output, train_output):
        delta_of_output_layers = [0] * self.output_num
        for i in range(self.output_num):
            delta_of_output_layers[i] = self.calculate_output_wrt_rawout(output[0, i], train_output[i])
        delta_of_hidden_layers = [0] * self.hidden_num
        for i in range(self.hidden_num):
            d_error_wrt_hidden_output = 0.0
            for o in range(self.output_num):
                d_error_wrt_hidden_output += delta_of_output_layers[o] * self.output_weights[i, o]
            delta_of_hidden_layers[i] = d_error_wrt_hidden_output * self.calculate_output_wrt_netinput(
                self.hidden_output[0, i])
        for i in range(self.output_num):
            for weight_j in range(self.output_weights.shape[0]):
                delta_wrt_weight_j = delta_of_output_layers[i] * self.hidden_output[0, weight_j]
                self.output_weights[weight_j, i] -= self.learning_rate * delta_wrt_weight_j

        for i in range(self.hidden_num):
            for weight_j in range(self.hidden_weights.shape[0]):
                delta_wrt_weight_j = delta_of_hidden_layers[i] * input[weight_j]
                self.hidden_weights[weight_j, i] -= self.learning_rate * delta_wrt_weight_j

        for i in range(self.hidden_num):
            for weight_j in range(self.rnn_weights.shape[0]):
                delta_wrt_weight_j = delta_of_hidden_layers[i] * self.hidden_output0[0, weight_j]
                self.rnn_weights[weight_j, i] -= self.learning_rate * delta_wrt_weight_j

    def sigmoid(self, x):
        """activation function"""
        return 1.0 / (1.0 + np.exp(-x))

    def softmax(self, x):
        """the activation for multiple output function"""
        return np.exp(x) / np.sum(np.exp(x))

    def calculate_output_wrt_rawout(self, output, train_output):
        """derivative of softmax function, actually in classification train_output equal to 1"""
        return (output - train_output)

    def calculate_output_wrt_netinput(self, output):
        """the derivative of sigmoid function"""
        return output * (1 - output)


def loadData(fileName, ratio):
    trainingData = []
    testData = []
    with open(fileName) as txtData:
        lines = txtData.readlines()
        for line in lines:
            lineData = line.strip().split(',')
            if random.random() < ratio:  # 数据集分割比例
                trainingData.append(lineData)  # 训练数据集列表
            else:
                testData.append(lineData)
    return trainingData, testData


def printmatrix(elman):
    print("\nself.hidden_weights = np.array([\n")
    for i in range(elman.input_num):
        print("[")
        for j in range(elman.hidden_num):
            print(elman.hidden_weights[i][j], end="")
            if j != elman.hidden_num - 1:
                print(", ", end="")
        print("],\n")
    print("])")

    print("\n")
    print("\n")
    print("self.rnn_weights = np.array([\n")
    for i in range(elman.hidden_num):
        print("[")
        for j in range(elman.hidden_num):
            print(elman.rnn_weights[i][j], end="")
            if j != elman.hidden_num - 1:
                print(", ", end="")
        print("],\n")
    print("])")

    print("\n")
    print("\nself.output_weights = np.array([\n")
    for i in range(elman.hidden_num):
        print("[")
        for j in range(elman.output_num):
            print(elman.output_weights[i][j], end="")
            if j != elman.output_num - 1:
                print(", ", end="")
        print("],\n")
    print("])")

    print("\n")


def splitData(dataset):
    x = []
    y = []
    for i in range(len(dataset)):
        x.append([float(tk) for tk in dataset[i][0:4]])
        y.append([float(tk) for tk in dataset[i][4:]])
    return np.array(x), np.array(y)


if __name__ == "__main__":
    traindata, testdata = loadData("J_3D.txt", 1)
    a, b = splitData(traindata)
    traindata, testdata11 = loadData("J_3D.txt", 0.7)
    c, d = splitData(testdata11)
    print(a.shape, b.shape)
    elman = ELMAN_RNN(input_num=4, hidden_num=20, output_num=12, learning_rate=0.01)
    train_x = np.array([12.280363960746627, 16.235850052694786, 24.710889481932327, 55.68000422090563])
    label_y = [[0.46346480719169314, -2.900512822251282, -3.9854204577892407, -1.6077592279797208, 3.5806076211231996,
                -31.98578665478903, 0.42989340818837135, -2.664316511498436, 6.800418140509234, -1.6693604045324568,
                3.7094858466851015, 30.116137479396187]]

    loss = []
    for i in range(500):
        for x, y in zip(a, b):
            elman.training(x, y)
        loss.append(elman.calculate_the_cross_entropy(c, d))
        if elman.calculate_the_cross_entropy(c, d) < 10:
            for i in range(elman.input_num):
                print("[")
                for j in range(elman.hidden_num):
                    print(elman.hidden_weights[i][j], end="")
                    if j != elman.hidden_num - 1:
                        print(", ", end="")
                print("],\n")

            print("\n")
            print("hidden_bias:\n")
            print(elman.hidden_bias)
            print("\n")
            print("rnn_weights:\n")
            for i in range(elman.hidden_num):
                print("[")
                for j in range(elman.hidden_num):
                    print(elman.rnn_weights[i][j], end="")
                    if j != elman.hidden_num - 1:
                        print(", ", end="")
                print("],\n")
            print("\noutput_weights:\n")
            for i in range(elman.hidden_num):
                print("[")
                for j in range(elman.output_num):
                    print(elman.output_weights[i][j], end="")
                    if j != elman.output_num - 1:
                        print(", ", end="")
                print("],\n")
            print("\noutput_bias:\n")
            print(elman.output_bias)

    print("\nself.hidden_weights = np.array([\n")
    for i in range(elman.input_num):
        print("[")
        for j in range(elman.hidden_num):
            print(elman.hidden_weights[i][j], end="")
            if j != elman.hidden_num - 1:
                print(", ", end="")
        print("],\n")
    print("])")

    print("\n")
    print("\n")
    print("self.rnn_weights = np.array([\n")
    for i in range(elman.hidden_num):
        print("[")
        for j in range(elman.hidden_num):
            print(elman.rnn_weights[i][j], end="")
            if j != elman.hidden_num - 1:
                print(", ", end="")
        print("],\n")
    print("])")

    print("\n")
    print("\nself.output_weights = np.array([\n")
    for i in range(elman.hidden_num):
        print("[")
        for j in range(elman.output_num):
            print(elman.output_weights[i][j], end="")
            if j != elman.output_num - 1:
                print(", ", end="")
        print("],\n")
    print("])")

    print("\n")
    x0 = elman.feed_forward(train_x)
    x1 = x0[0][:]
    J = np.array([(x1[0], x1[1], x1[2]), (x1[3], x1[4], x1[5]), (x1[6], x1[7], x1[8]), (x1[9], x1[10], x1[11])])
    u = np.dot(np.linalg.pinv(J), train_x)
    print(x1)
    plt.figure()
    plt.plot(loss)
    plt.title('the loss with the training')
    plt.show()
    print('training finished!')
